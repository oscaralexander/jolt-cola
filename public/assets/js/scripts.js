/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
module.exports = __webpack_require__(3);


/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__modules_three__ = __webpack_require__(2);\n\n\nwindow.onload = function () {\n    __WEBPACK_IMPORTED_MODULE_0__modules_three__[\"a\" /* default */].init();\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvc2NyaXB0cy5qcz82NDA1Il0sIm5hbWVzIjpbIndpbmRvdyIsIm9ubG9hZCIsInRocmVlIiwiaW5pdCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBOztBQUVBQSxPQUFPQyxNQUFQLEdBQWdCLFlBQU07QUFDbEJDLG1FQUFLQSxDQUFDQyxJQUFOO0FBQ0gsQ0FGRCIsImZpbGUiOiIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHRocmVlIGZyb20gJy4vbW9kdWxlcy90aHJlZSdcblxud2luZG93Lm9ubG9hZCA9ICgpID0+IHtcbiAgICB0aHJlZS5pbml0KClcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvc2NyaXB0cy5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/**\n * https://threejs.org/examples/?q=particle#canvas_particles_sprites\n */\n\nvar three = {\n    can: null,\n    centerX: window.innerWidth * 0.5,\n    centerY: window.innerHeight * 0.5,\n    deltaX: 0,\n    deltaY: 0,\n    mainLight: null,\n    mouseX: 0,\n    mouseY: 0,\n    paused: false,\n    pointLights: [],\n\n    addMainLight: function addMainLight() {\n        var pointLight = new THREE.PointLight(0xFFFFFF);\n        pointLight.position.set(1, 4, 1);\n        this.camera.add(pointLight);\n        this.scene.add(this.camera);\n    },\n    addPointLight: function addPointLight() {\n        var _this = this;\n\n        var loader = void 0;\n        var material = void 0;\n        var pointLight = void 0;\n        var sprite = void 0;\n\n        loader = new THREE.TextureLoader();\n        loader.load('/assets/3d/light-1.png', function (texture) {\n            // Create light sprite\n            material = new THREE.SpriteMaterial({\n                // fog: true,\n                blending: THREE.AdditiveBlending,\n                transparent: true,\n                map: texture\n            });\n            sprite = new THREE.Sprite(material);\n            sprite.scale.set(0.25, 0.25, 1);\n\n            // Create actual light\n            pointLight = new THREE.PointLight(0xCC00FF, 1, 3);\n            pointLight.add(sprite);\n            _this.pointLights.push(pointLight);\n            _this.scene.add(_this.pointLights[_this.pointLights.length - 1]);\n        });\n    },\n    animate: function animate() {\n        this.deltaX += (this.mouseX - this.deltaX) * 0.05;\n        this.deltaY += (this.mouseY - this.deltaY) * 0.05;\n\n        var x = this.deltaX / this.centerX;\n        var y = this.deltaY / this.centerY;\n\n        if (this.can) {\n            this.can.rotation.x = 45 * (this.deltaY / this.centerY) * Math.PI / 180;\n            this.can.rotation.y += x * 0.025;\n        }\n\n        this.animatePointLights();\n\n        requestAnimationFrame(this.animate.bind(this));\n        this.render();\n    },\n    animatePointLights: function animatePointLights() {\n        var _this2 = this;\n\n        var x = void 0;\n        var y = void 0;\n        var z = void 0;\n\n        this.pointLights.forEach(function (pointLight, i) {\n            x = Math.cos(_this2.step * 0.1) * 2;\n            y = Math.sin(_this2.step * 0.1) * 2;\n            z = Math.sin(_this2.step * 0.1) * 2;\n            _this2.pointLights[i].position.set(x, y, z);\n        });\n    },\n    drawCan: function drawCan() {\n        var _this3 = this;\n\n        var color = 0xCCCCCC;\n        var loader = new THREE.ColladaLoader();\n        var shininess = 35;\n        var specular = 0xFFFFFF;\n        var textureLoader = new THREE.TextureLoader();\n\n        loader.load('assets/3d/can.dae', function (collada) {\n            _this3.can = collada.scene;\n            _this3.can.traverse(function (node) {\n                if (node.isMesh) {\n                    if (node.name === 'body') {\n                        // Render wrapper\n                        textureLoader.load('/assets/3d/wrapper.png', function (texture) {\n                            texture.anisotropy = _this3.renderer.capabilities.getMaxAnisotropy();\n\n                            node.material = new THREE.MeshPhongMaterial({\n                                color: color,\n                                map: texture,\n                                shininess: shininess,\n                                specular: specular\n                            });\n                        });\n                    } else {\n                        // Render aluminium\n                        node.material = new THREE.MeshPhongMaterial({\n                            color: color,\n                            shininess: shininess,\n                            specular: specular\n                        });\n                    }\n                }\n            });\n\n            _this3.scene.add(_this3.can);\n        });\n    },\n    init: function init() {\n        this.initScene();\n        this.initRenderer();\n        this.initCamera();\n\n        // Geometry\n        this.drawCan();\n\n        // Add light\n        this.addMainLight();\n\n        // Interaction listeners\n        document.addEventListener('mousemove', this.onMouseMove.bind(this), false);\n\n        // Init resize event listener\n        window.onorientationchange = this.onResize.bind(this);\n        window.onresize = this.onResize.bind(this);\n\n        // Go!\n        this.animate();\n    },\n    initCamera: function initCamera() {\n        this.camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 0.1, 1000);\n        this.camera.position.set(0, 0, 4);\n        this.camera.lookAt(0, 0, 0);\n    },\n    initRenderer: function initRenderer() {\n        this.renderer = new THREE.WebGLRenderer({\n            antialias: true\n        });\n        this.renderer.setClearColor(0x000000, 1);\n        this.renderer.setPixelRatio(window.devicePixelRatio);\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\n\n        document.getElementById('three').appendChild(this.renderer.domElement);\n    },\n    initScene: function initScene() {\n        this.scene = new THREE.Scene();\n    },\n    onMouseMove: function onMouseMove(e) {\n        this.mouseX = e.clientX - this.centerX;\n        this.mouseY = e.clientY - this.centerY;\n    },\n    onResize: function onResize() {\n        this.centerX = window.innerWidth * 0.5;\n        this.centerY = window.innerHeight * 0.5;\n        this.camera.aspect = window.innerWidth / window.innerHeight;\n        this.camera.updateProjectionMatrix();\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\n    },\n    render: function render() {\n        this.renderer.render(this.scene, this.camera);\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (three);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvc2Nzcy9zdHlsZS5zY3NzP2U3Y2QiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvc2Nzcy9zdHlsZS5zY3NzXG4vLyBtb2R1bGUgaWQgPSAzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3\n");

/***/ })
/******/ ]);